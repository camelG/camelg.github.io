(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{395:function(t,n,s){"use strict";s.r(n);var a=s(4),e=Object(a.a)({},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("前から気になっていた技術で、非常に魅力的を感じました。いつかやってみようとずっと思ったけど、時間がなくて、今日はゴールデンウィーク直前やし、仕事も片付けたので、やります。")]),t._v(" "),s("h2",{attrs:{id:"document"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#document","aria-hidden":"true"}},[t._v("#")]),t._v(" Document")]),t._v(" "),s("p",[s("a",{attrs:{href:"http://docs.docker.jp/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("documents"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"docker-command-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-command-options","aria-hidden":"true"}},[t._v("#")]),t._v(" docker command Options")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("Options:\n      --add-host list                  Add a custom host-to-IP mapping "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("host:ip"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  -a, --attach list                    Attach to STDIN, STDOUT or STDERR\n      --blkio-weight uint16            Block IO "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("relative weight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", between 10 and 1000, or 0 to disable\n                                       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("default 0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      --blkio-weight-device list       Block IO weight "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("relative device weight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("default "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      --cap-add list                   Add Linux capabilities\n      --cap-drop list                  Drop Linux capabilities\n      --cgroup-parent string           Optional parent cgroup "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" the container\n      --cidfile string                 Write the container ID to the "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v("\n      --cpu-period int                 Limit CPU CFS "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Completely Fair Scheduler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" period\n      --cpu-quota int                  Limit CPU CFS "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Completely Fair Scheduler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("quota")]),t._v("\n      --cpu-rt-period int              Limit CPU real-time period "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" microseconds\n      --cpu-rt-runtime int             Limit CPU real-time runtime "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" microseconds\n  -c, --cpu-shares int                 CPU shares "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("relative weight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      --cpus decimal                   Number of CPUs\n      --cpuset-cpus string             CPUs "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("which")]),t._v(" to allow execution "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0-3, 0,1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      --cpuset-mems string             MEMs "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("which")]),t._v(" to allow execution "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0-3, 0,1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  -d, --detach                         Run container "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" background and print container ID\n      --detach-keys string             Override the key sequence "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" detaching a container\n      --device list                    Add a "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("host")]),t._v(" device to the container\n      --device-cgroup-rule list        Add a rule to the cgroup allowed devices list\n      --device-read-bps list           Limit "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),t._v(" rate "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bytes per second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" from a device "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("default "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      --device-read-iops list          Limit "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),t._v(" rate "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("IO per second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" from a device "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("default "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      --device-write-bps list          Limit "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),t._v(" rate "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bytes per second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" to a device "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("default "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      --device-write-iops list         Limit "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),t._v(" rate "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("IO per second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" to a device "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("default "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      --disable-content-trust          Skip image verification "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("default true"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      --dns list                       Set custom DNS servers\n      --dns-option list                Set DNS options\n      --dns-search list                Set custom DNS search domains\n      --entrypoint string              Overwrite the default ENTRYPOINT of the image\n  -e, --env list                       Set environment variables\n      --env-file list                  Read "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" of environment variables\n      --expose list                    Expose a port or a range of ports\n      --group-add list                 Add additional "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("groups")]),t._v(" to "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),t._v("\n      --health-cmd string              Command to run to check health\n      --health-interval duration       Time between running the check "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ms"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("default 0s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      --health-retries int             Consecutive failures needed to report unhealthy\n      --health-start-period duration   Start period "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" the container to initialize before starting\n                                       health-retries countdown "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ms"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("default 0s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      --health-timeout duration        Maximum "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("time")]),t._v(" to allow one check to run "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ms"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("default 0s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      --help                           Print usage\n  -h, --hostname string                Container "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("host")]),t._v(" name\n      --init                           Run an init inside the container that forwards signals and reaps\n                                       processes\n  -i, --interactive                    Keep STDIN "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),t._v(" even "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" not attached\n      --ip string                      IPv4 address "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e.g., 172.30.100.104"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      --ip6 string                     IPv6 address "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e.g., 2001:db8::33"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      --ipc string                     IPC mode to use\n      --isolation string               Container isolation technology\n      --kernel-memory bytes            Kernel memory limit\n  -l, --label list                     Set meta data on a container\n      --label-file list                Read "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" a line delimited "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" of labels\n      --link list                      Add "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("link")]),t._v(" to another container\n      --link-local-ip list             Container IPv4/IPv6 link-local addresses\n      --log-driver string              Logging driver "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" the container\n      --log-opt list                   Log driver options\n      --mac-address string             Container MAC address "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e.g., 92:d0:c6:0a:29:33"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  -m, --memory bytes                   Memory limit\n      --memory-reservation bytes       Memory soft limit\n      --memory-swap bytes              Swap limit equal to memory plus swap: "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-1'")]),t._v(" to "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("enable")]),t._v(" unlimited swap\n      --memory-swappiness int          Tune container memory swappiness "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0 to 100"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("default -1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      --mount "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mount")]),t._v("                    Attach a filesystem "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mount")]),t._v(" to the container\n      --name string                    Assign a name to the container\n      --network string                 Connect a container to a network "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("default "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"default"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      --network-alias list             Add network-scoped "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alias")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" the container\n      --no-healthcheck                 Disable any container-specified HEALTHCHECK\n      --oom-kill-disable               Disable OOM Killer\n      --oom-score-adj int              Tune "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("host")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'s OOM preferences (-1000 to 1000)\n      --pid string                     PID namespace to use\n      --pids-limit int                 Tune container pids limit (set -1 for unlimited)\n      --privileged                     Give extended privileges to this container\n  -p, --publish list                   Publish a container'")]),t._v("s port"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" to the "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("host")]),t._v("\n  -P, --publish-all                    Publish all exposed ports to random ports\n      --read-only                      Mount the container's root filesystem as "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),t._v(" only\n      --restart string                 Restart policy to apply when a container exits "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("default "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"no"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      --rm                             Automatically remove the container when it exits\n      --runtime string                 Runtime to use "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" this container\n      --security-opt list              Security Options\n      --shm-size bytes                 Size of /dev/shm\n      --sig-proxy                      Proxy received signals to the process "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("default true"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      --stop-signal string             Signal to stop a container "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("default "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"SIGTERM"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      --stop-timeout int               Timeout "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("in seconds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" to stop a container\n      --storage-opt list               Storage driver options "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" the container\n      --sysctl map                     Sysctl options "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("default map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      --tmpfs list                     Mount a tmpfs directory\n  -t, --tty                            Allocate a pseudo-TTY\n      --ulimit "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ulimit")]),t._v("                  Ulimit options "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("default "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  -u, --user string                    Username or UID "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("format: "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("uid"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("group"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("gid"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      --userns string                  User namespace to use\n      --uts string                     UTS namespace to use\n  -v, --volume list                    Bind "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mount")]),t._v(" a volume\n      --volume-driver string           Optional volume driver "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" the container\n      --volumes-from list              Mount volumes from the specified container"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  -w, --workdir string                 Working directory inside the container\n")])])]),s("h2",{attrs:{id:"detach"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#detach","aria-hidden":"true"}},[t._v("#")]),t._v(" --detach")]),t._v(" "),s("p",[t._v("-d, --detach"),s("br"),t._v("\nRun container in background and print container ID")]),t._v(" "),s("h2",{attrs:{id:"interactive"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#interactive","aria-hidden":"true"}},[t._v("#")]),t._v(" --interactive")]),t._v(" "),s("p",[t._v("-i, --interactive"),s("br"),t._v("\nKeep STDIN open even if not attached")]),t._v(" "),s("h2",{attrs:{id:"tty"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tty","aria-hidden":"true"}},[t._v("#")]),t._v(" --tty")]),t._v(" "),s("p",[t._v("-t, --tty"),s("br"),t._v("\nAllocate a pseudo-TTY")]),t._v(" "),s("h2",{attrs:{id:"publish-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#publish-list","aria-hidden":"true"}},[t._v("#")]),t._v(" -publish list")]),t._v(" "),s("p",[t._v("-p, --publish list"),s("br"),t._v("\nPublish a container's port(s) to the host")])])},[],!1,null,null,null);n.default=e.exports}}]);